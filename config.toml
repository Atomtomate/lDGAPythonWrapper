[general]
runDir = "/afs/physnet.uni-hamburg.de/users/th1_ro/jstobbe/lDGA/test_runs/b{beta}_U{U}"     # Directory for calculations, {beta} and {U} will be replaced by the values set in [parameters] 
codeDir = "/afs/physnet.uni-hamburg.de/users/th1_ro/jstobbe/lDGA/codes"                                # Directory for ED Codes
CFLAGS = "-O3 -xHost"                                                       # Compilation flags for ifort, mpiif90
verbose = false                                                             # Print additional information during compilations
cluster = "Hamburg"                                                          # This can only be set to berlin for now. Placeholder for PhysNet/local options
custom_slurm_lines = ""                                                     # Custom line in slurm start script, e.g. -A hhp00048
custom_init_andpar_file = ""                                                # Path to anderson parameter file to start calculation with. Otherwise eps(i) = 0.1*i is used
start_from = ""                                                             # ALTERNATIVE to custom_init_andpar_file! Setting this to a prvious folder containing a jobid, also checks for completion of dmft
custom_init_andpar_vals_only = true                                         # If true only values are copied, otherwise the file is copied 1:1
custom_module_load = "module restore ed"                                    # Module restore command. This will restore needed modules such as ifort. See installation instructions
custom_conda_env = "p3"                                                     # Anaconda restore command. See installation instructions
auto_continue = true                                                        # TODO: remove
restart_after_success = false                                               # true: will not restart already finished calculations, false: will override finished calculations

[parameters]
lattice = "3Dsc-0.2041241452319315"                                         # 3Dsc-[t], 2Dsc-[t], FCC-[t], TODO: link to docu for kgrid strings
beta = 14.0
U = 4.0
mu = "HF"

[ED]
skip = false
ns = 5
symm = true
iterations = 80
ksteps = 100
Iwmax = 32768
Iwmaxreal = 32768
gwcalc = false
nmpara = 30
w_min = -12.0       # unwichtig
w_max = 12.0        # unwichtig
deltino = 0.01      # unwichtig
imaxmu = 0          # unwichtig        
deltamu = 0.0       # unwichtig
conv_param = "1.d-13"
Traw = "1.d-9"
small = "1.d-10"
approx = "1.d-10"
# thresholds for anderson parameters checks
square_sum_diff = 1.0      # maximal allowed value for sum_k (eps^2_k - tpar^2_k)
bathsite_cancel_eps = 0.01 # minimal allowed value for |eps_k - eps_l| 
bathsite_cancel_V = 0.01   # minimal allowed value for |V_l|
large_eps = 10             # maximal factor c for |eps_k| = c * T
check_behavior = "break"   # possible options: ignore (continue on check fail), warn (warn in run.err), break (fail job)


[Vertex]
skip = false
# freqList can be either a path to a frequency list or
# "F1:F2,B1:B2" for N1 to N2 (integer) fermionic and B1 to B2 bosonic.
freqList = "/afs/physnet.uni-hamburg.de/users/th1_ro/jstobbe/lDGA/grids/b150_f150_s1"
nprocs = 500

[Susc]
skip = false
nBoseFreq = 10000

[Trilex]
skip = true
nFermiFreq = 41
nBoseFreq = 40

[Postprocess]
skip = false
keep_only_data = false
data_bakup = "cp"
output_format = "tar,text"
split = true

[lDGA]
LQ = 4          # FFT requires: 2 * LQ - 2 == Nint
Nint = 4        # 
k_range = 4     # Sigma FFT requires: k_range = LQ - 1
only_chisp_ch = false
only_lambda_sp = true
only_positive_ch = true
only_positive_sp = true
kInt = "FFT" # possible values are naive, gl-n (n being the order of the Gauss Legendre integration) or FFT

[lDGAFortran]
skip = true

[lDGAJulia]
skip = true
nprocs = 96
sysimage = "/scratch/projects/hhp00048/codes/TestRuns_LadderDGA.jl/LadderDGA_Precompile.so"
outfile   = "lDGA_out"
Nk        = [10]   # IMPORTANT: in Fortran this is Nk x Nk and generated bei make_klist. TODO: adaptiv mesh
chi_asympt_method = "direct_approx2"            # direct/direct_approx2/sc/nothing, see BSE_SC module for more
chi_asympt_shell = 20 
tail_correction = "nothing"             #"Richardson" # Nothing, Richardson, Shanks
lambda_correction = "sp"                # nothing, sp, sp_ch
bosonic_sum_range = "common"                  # common (intersection of individual ranges), individual (max range in each channel; fortran def    ault), full (all frequencies), fixed:N:M (always sum from N to (including) M, indexing starts at 0)
force_full_bosonic_chi = true           # compute all omega frequencies for chi and trilex
chi_unusable_fill_value = "chi_lambda"  # can be "0", "chi_lambda" or "chi". sets either 0, lambda corrected or non lambda corrected values outside usable omega range
chi_only = false                        # Should only chis_omega and chich_omega be calculated?
rhs  = "native"                         # TODO: implement possible modes: native (fixed for tc, error_comp for naive), 
                          #                                 fixed (n/2 (1 - n/2) - sum(chi_ch)), 
                          #                                 error_comp (chi_loc_ch + chi_loc_sp - chi_ch)
fermionic_tail_coeffs = [0,1,2,3,4]
bosonic_tail_coeffs = [0,1,2,3,4]
bosonic_tail_correction = "coeffs"
usable_prct_reduction = 0.10

[lDGAPost]
delete_calc = false     # WARNING: this will delete all logfiles and intermediate results such as F and chi

[run_kConv]
skip = false        # run k-grid convergence and write out order parameter at each iteration. This can take a very long time! 
