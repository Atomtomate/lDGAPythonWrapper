[general]
runDir = "/home/hhpmleus/ED_fortran/QMC_andpar/n0.75/ED_vertex/ED_vertex_example2" #"/scratch/projects/hhp00048/PD_test/out_of_hf_tests/b{beta}_U{U}_mu0.57"     # Directory for calculations, {beta} and {U} will be replaced by the values set in [parameters] 
codeDir = "/scratch/projects/hhp00048/codes"                                # Directory for ED Codes
CFLAGS = " -O3 "                                                       # Compilation flags for ifort, mpif90
verbose = false                                                             # Print additional information during compilations
cluster = "berlin"                                                          # This can only be set to berlin for now. Placeholder for PhysNet/local options
custom_slurm_lines = ""                                                     # Custom line in slurm start script, e.g. -A hhp00048
#custom_init_andpar_file = ""                                                # Path to anderson parameter file to start calculation with. Otherwise eps(i) = 0.1*i is used
#start_from = ""                                                             # ALTERNATIVE to custom_init_andpar_file! Setting this to a prvious folder containing a jobid, also checks for completion of dmft
custom_init_andpar_vals_only = true                                         # If true only values are copied, otherwise the file is copied 1:1
custom_module_load = "module restore ed"                                    # Module restore command. This will restore needed modules such as ifort. See installation instructions
custom_conda_env = "p3"                                                     # Anaconda restore command. See installation instructions
auto_continue = true                                                        # TODO: remove
restart_after_success = false                                               # true: will not restart already finished calculations, false: will override finished calculations

[parameters]
lattice = "3Dsc-0.2041241452319315"                                         # 3Dsc-[t], 2Dsc-[t], FCC-[t], 2dmag-[t], TODO: link to docu for kgrid strings
beta = 10.0
U = 1.1
mu = 0.57
p = 1
L = 3

[ED]
skip = false
custom_dmft_directory = ""      #Set alternative file directory for the DMFT calculation. Leave empty to use the directory set in 'runDir'
custom_compile_command = ""     #Set alternative compile command for the DMFT calculation. Leave empty to use the standard compile commands
ns = 5
symm = false
iterations = 80
ksteps = 100
Iwmax = 32768
Iwmaxreal = 5
gwcalc = false
nmpara = 30
w_min = -12.0       # unwichtig
w_max = 12.0        # unwichtig
deltino = 0.01      # unwichtig
imaxmu = 0          # unwichtig        
deltamu = 0.0       # unwichtig
conv_param = "1.d-13"
Traw = "1.d-10"
small = "1.d-11"
approx = "1.d-11"
# thresholds for anderson parameters checks
square_sum_diff = 1.0      # maximal allowed value for sum_k (eps^2_k - tpar^2_k)
bathsite_cancel_eps = 0.01 # minimal allowed value for |eps_k - eps_l| 
bathsite_cancel_V = 0.01   # minimal allowed value for |V_l|
large_eps = 10             # maximal factor c for |eps_k| = c * T
check_behavior = "break"   # possible options: ignore (continue on check fail), warn (warn in run.err), break (fail job)

[w2dyn]
skip = true
parameters_template = "/scratch/projects/hhp00048/lDGA/2D_cuprates_doped_2/w2dyn/Parameters_template.in"
runfile = "/scratch/projects/hhp00048/w2dyn/bin/DMFT.py"
N_DMFT = [20, 12, 8]
N_procs = [192, 192, 384]
Nmeas  = [1e6, 1e7, 4e7]
NCorr_init = 50
Nk = 100


[Vertex]
skip = false
# freqList can be either a path to a frequency list or
# "F1:F2,B1:B2" for N1 to N2 (integer) fermionic and B1 to B2 bosonic.
freqList = "/scratch/projects/hhp00048/grids/b10_f10_s1"
nprocs = 960

[Susc]
skip = true
nBoseFreq = 10000

[Trilex]
skip = true
nFermiFreq = 41
nBoseFreq = 40

[Postprocess]
skip = true
keep_only_data = false
data_bakup = "cp"
output_format = "tar,text"
split = true

[lDGA]
LQ = 4          # FFT requires: 2 * LQ - 2 == Nint
Nint = 4        # 
k_range = 4     # Sigma FFT requires: k_range = LQ - 1
only_chisp_ch = false
only_lambda_sp = true
only_positive_ch = true
only_positive_sp = true
kInt = "FFT" # possible values are naive, gl-n (n being the order of the Gauss Legendre integration) or FFT

[lDGAFortran]
skip = true

[lDGAJulia]
skip = false
nprocs = 96
sysimage = "/scratch/projects/hhp00048/codes/TestRuns_LadderDGA.jl/LadderDGA_Precompile.so"
outfile   = "lDGA_out"
Nk        = [10]   # IMPORTANT: in Fortran this is Nk x Nk and generated bei make_klist. TODO: adaptiv mesh
chi_asympt_method = "direct"            # direct/direct_approx2/sc/nothing, see BSE_SC module for more
chi_asympt_shell = 20 
usable_prct_reduction = 0.00
run_script = "/scratch/projects/hhp00048/codes/LadderDGA.jl/run_sc.jl"
